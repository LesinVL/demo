#ifndef __Prima_rtm_H
#define __Prima_rtm_H

//#define VOLUMEMAX  4
#define NoData     0x80
#define DataToMpi  99
#define DataToUzo  88
#define busyError  111
#define MessageMax 128
#define RTMDMAX    1460   //1460                          // Максимальное число передаваемых слов DATA
#define RTMDMAXandUzo    1564
#define DATAMAX    112
#define BeginPack  0x23
#define L_ip       12
//typedef __packed union {
#define Preambula   5
#define ResMax     8
//SPI DMA
//#define DMA_CH_SPI_TX  DMA_Channel_REQ_SSP1_TX
//#define DMA_CH_SPI_RX  DMA_Channel_REQ_SSP1_RX

//команды обмена Прима-БЦВК
#define c_Confirm                 0       //Подтверждение команды
#define c_Data                    1       //Данные (одиночное сообщение)
#define c_Long_data               2       //Данные (составное сообщение, только "Перевал")
#define c_Result_transfer_data    3       //Результат передачи данных

//#define c_Status_channel         4       //Состояние канала
#define c_Set_mode_Ethernet       16      //Установить режим взаимодействия с Ethernet радиостанцией
#define c_Set_mode_channel        10      //Установить режим  канала (ком)  Режим канала (донесение)
#define c_Set_mode_time           11      //Установить текущее время
#define c_Set_mode_zas            12      //Установить режимы ЗАС
#define c_Reset_channel           13      //Сбросить канал в исходное состояние
#define c_Abort_transfer          14      //Прекратить передачу
#define c_Allow_longdata          15      //Разрешить обработку составных сообщений на приеме
//#define c_Request_mode_channel  20      //Запрос режима канала
#define c_Allow_report_set        20        //Разрешить выдачу в БЦВК донесений "Состояние канала" при обработке передаваемых и принимаемых данных







//КОД (8 бит) - код подтверждения приема команды, полученной от БЦВК: 0 = команда выполнена или принята к выполнению; 1 = ошибка формата; 2 = невозможно выполнить.
enum {com_OK,com_ERROR,com_UNABLE};

/*#define K1  1
#define K2  2
#define K3  3
#define K4  4
#define K5  5
#define K6  6
#define K7  7
#define K8  8
#define Z1  9
#define Z2  10
*/

#pragma data_alignment=4
 typedef  __packed union {
             #pragma data_alignment=4
             struct {
             uint16_t IP[2];
             uint16_t Port;
             uint32_t Mac1;
             uint16_t Mac2;
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
            }form;
            uint8_t d[16];
} Ethernet_Nk;

#define L_Max  6
//-------------------------------------------------C_0-------------------------------------------------------------------------------------------------------
#define       com_C0                        0
#define       L_C0                        6 //125


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             uint16_t N_data;
             uint8_t  Mode;
             //uint8_t d[L_C0-6];
             }form;
             uint8_t d[L_C0];
} C_0;

//------------------------------------------------C_0------------------------------------------------------------------------------------------------------


//-------------------------------------------------C_1-------------------------------------------------------------------------------------------------------
#define       com_C1                         1
#define       L_C1                         5


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             }form;
             uint8_t d[L_C1];
} C_1;

//------------------------------------------------C_1------------------------------------------------------------------------------------------------------

//------------------------------------------------C_2-------------------------------------------------------------------------------------------------------
#define       L_C2                         3


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             }form;
             uint8_t d[L_C1];
} C_2;

//------------------------------------------------C_2---------------------------------------------------------------------------------------------------------

//-------------------------------------------------C_3-------------------------------------------------------------------------------------------------------
#define       com_C3                       3
#define       L_C3                         4


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             uint8_t  Status;
             }form;
             uint8_t d[L_C3];
} C_3;

//------------------------------------------------C_3------------------------------------------------------------------------------------------------------

//-------------------------------------------------C_4-------------------------------------------------------------------------------------------------------
#define       L_C4                         5


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             uint16_t N_data;
             }form;
             uint8_t d[L_C4];
} C_4;

//------------------------------------------------C_4------------------------------------------------------------------------------------------------------
//-------------------------------------------------C_5-------------------------------------------------------------------------------------------------------
#define       L_C5                         6


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             uint16_t N_data;
             uint8_t  KO;
             }form;
             uint8_t d[L_C5];
} C_5;

//------------------------------------------------C_5------------------------------------------------------------------------------------------------------
//-------------------------------------------------C_6-------------------------------------------------------------------------------------------------------
#define       L_C6                         5
#define       com_C6                       6

#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             uint16_t N_data;
             }form;
             uint8_t d[L_C6];
} C_6;

//------------------------------------------------C_6------------------------------------------------------------------------------------------------------
//-------------------------------------------------C_7-------------------------------------------------------------------------------------------------------
#define       L_C7                         3


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Kod;
             uint16_t N_msg;
             }form;
             uint8_t d[L_C7];
} C_7;

//------------------------------------------------C_7------------------------------------------------------------------------------------------------------
typedef         struct {
                        uint16_t IP[2];
                        uint16_t Port;
                        uint16_t Mac[3];
                } Adr_channel;


typedef __packed    union {
                    uint32_t d[5];
                    struct
                    {
                     Adr_channel Adr;
                     C_0         c_C0;
                    }form;
} St_C0;

#define         L_H_d_tx                  29
typedef __packed    union {

                            uint8_t d[29];

                    struct {
                            uint8_t  Pnp;
                            uint32_t L;
                            uint8_t A;
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
                            uint32_t INS;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint8_t  NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
                            uint8_t  NPrg;  //ПРГ (8 бит) - номер программы Т-821-06 (0...255); в сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint8_t  RP;   //РП (8 бит) - режим передачи: 0 = "Перевал" - короткий код, 8 = "Перевал" - длинный код; остальные значения совпадают со значениями РК из команды "Установить режим канала".
                            //В пределах режима "Чайка" значение РП имеет приоритет и может отличаться от значения РК, ранее установленного командой "Установить режим канала".
                            uint8_t  NR;   //НП (8 бит) - непрерывный режим работы передатчика: 0 = отключать излучение по окончании передачи в радиоканал всех сообщений, полученных от БЦВК,
                            //1 = не отключать излучение.
                            uint8_t  DP;      //длина преамбулы
                            uint8_t NCh0;
                            uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
                            Adr_channel Adr;
                            }form;
 } H_d_tx;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//#pragma data_alignment=4
#define        L_Header_data                    17
typedef __packed    union {

                            uint8_t d[RTMDMAXandUzo/*RTMDMAX + 96*/];
                            uint32_t D[RTMDMAXandUzo/4];

                    struct {

                            uint8_t  Pnp;
                            uint32_t L;
                            uint8_t A;
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
                           // uint32_t
                            uint16_t  INS1;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint16_t  INS2;
                            uint8_t  NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
                            uint8_t  NPrg;  //ПРГ (8 бит) - номер программы Т-821-06 (0...255); в сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint8_t  RP;   //РП (8 бит) - режим передачи: 0 = "Перевал" - короткий код, 8 = "Перевал" - длинный код; остальные значения совпадают со значениями РК из команды "Установить режим канала".
                            //В пределах режима "Чайка" значение РП имеет приоритет и может отличаться от значения РК, ранее установленного командой "Установить режим канала".
                            uint8_t  NR;   //НП (8 бит) - непрерывный режим работы передатчика: 0 = отключать излучение по окончании передачи в радиоканал всех сообщений, полученных от БЦВК,
                            //1 = не отключать излучение.
                            uint8_t  DP;      //длина преамбулы
                            uint8_t NCh0;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
                            uint8_t NCh;
                            Adr_channel Adr[8];
                            }form;



 } Header_data_pc;
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//-----------------------------------------------------RTM_COM-------------------------------------------------------------------------------------------------------

//------------------------------------------------c_Result_transfer_data-------------------------------------------------------------------------------------------
#define     L_Result_transfer_data          29

#pragma data_alignment=4
 typedef  __packed union {

             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
             uint32_t INS;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
             uint16_t  NSeg; //НС,
             uint16_t  SumSeg; //КС (по 16 бит каждый) - номер сегмента и количество сегментов в передаваемом сообщении;
                             //при передаче одиночного сообщения НС = КС = 1. Сегменты формируются комплексом "Прима-БМ". Донесение, в котором НС = КС, КСП = 0,
                             //означает полное завершение передачи данных в радиоканал.
             uint8_t   Code; //КСП (8 бит) - код состояния передачи:
            // 0 = передача выполнена;
            // 1 = таймаут ожидания сигнала "Излучение включено";
            // 2 = преждевременное отключение сигнала "Излучение включено";
            // 3 = передача выполнена, но нет отключения сигнала "Излучение включено" в ответ на отключение сигнала "Включить излучение";
           //  4 = передача прекращена по команде "Сбросить канал" или "Прекратить передачу";
           //  5 = ошибка формата сообщения данных;
           //  6 = неисправность Т-821-06 (аппарат неисправен или отсутствует требуемая программа);
            // 7 = не задан режим канала (исходное состояние)
            uint8_t NCh0;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
            uint8_t NCh;
            Adr_channel Adr;

}form;
 uint32_t d[((L_Result_transfer_data+3)/4)+1];

}RTM_result;


//-------------------------------------------------------------------c_Set_mode_Ethernet-----------------------------------------------------------------------------
#define     L_Set_mode_Ethernet              38
#define     L_Set_mode_EthernetIrq           10
#pragma data_alignment=4
 typedef  __packed union {
              //uint8_t D[L_Set_mode_Ethernet];
             uint32_t d[L_Set_mode_EthernetIrq];
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             //uint32_t IP;
             //uint16_t Port;
             //uint32_t Mac1;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             //uint16_t Mac2;
             Adr_channel Adr1;
             Adr_channel Adr2;
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint8_t Shl;
             uint8_t NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
             uint8_t Kp;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint8_t Kpp;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
             uint16_t Rd;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint8_t Kv;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
            }form;

} RTM_setEthernet;

//-------------------------------------------------------------------c_Set_mode_channel---------------------------------------------------------------------------------
#define     L_Set_mode_channel            14

#pragma data_alignment=4
 typedef  __packed union {
             #pragma data_alignment=4
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
            // uint8_t Mode;  //РК (8 бит) - режим канала:
             //0 = Перевал,
             //1 = Чайка однократный,
             //2 = Чайка двукратный,
             //3 = Чайка "Аккорд",
             //4 = Чайка "Мелодия",
             //5 = без кодирования,
             //7 = режим не задан (исходное состояние; передается только в донесении, для сброса режима предназначена команда сброса канала).


             uint8_t V;   //СК (8 бит) - код скорости передачи и приема; значения 0...7 соответствуют скоростям 75, 150, 300, 1200, 2400, 4800, 9600, 16000.
             uint8_t Shl;  //ШЛ (8 бит) - включение/состояние шлейфов; значения:
             //1 = включить;
             //0 = отключить. разряды байта: D0 = контроллер Ethernet; D1 = контроллер ЗАС (МПДИ-01); D2 = кодек соответствующего канала (МПДИ-02);

             uint8_t NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
             uint8_t Lp;     // ДП (8 бит) - длина преамбулы на передаче, в десятках мс.
             uint8_t PPRCH; //ППРЧ (8 бит) - работа радиостанции в режиме ППРЧ: 0 = отключить, 1 = включить
             uint8_t Interface;      //ТС (8 бит) - тип стыка с радиостанцией: 0 = С1-ТГ, 1 = С1-ФЛ-БИ, 2 = Ethernet
             uint8_t Kvt;  // режим квитирования
            }form;
            uint8_t D[L_Set_mode_channel];
} RTM_setchannel;


#endif

