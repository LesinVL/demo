#ifndef __Prima_rtm_H
#define __Prima_rtm_H

//#define VOLUMEMAX  4
#define DataToMpi  99
#define DataToUzo  88
#define busyError  111
#define MessageMax 128
#define RTMDMAX    1400   //1460                          // Максимальное число передаваемых слов DATA
#define DATAMAX    112
#define BeginPack  0x23
#define L_ip       12
//typedef __packed union {
#define Preambula   5000
efine Preambula   5000
//команды обмена Прима-БЦВК
#define c_Confirm                 0   !!!!!!    //Подтверждение команды
#define c_Data                    1       //Данные (одиночное сообщение)
#define c_Long_data               2       //Данные (составное сообщение, только "Перевал")
#define c_Result_transfer_data    3       //Результат передачи данных

//#define c_Status_channel         4       //Состояние канала
#define c_Set_mode_Ethernet       16      //Установить режим взаимодействия с Ethernet радиостанцией
#define c_Set_mode_channel        10      //Установить режим  канала (ком)  Режим канала (донесение)
#define c_Set_mode_time           11      //Установить текущее время
#define c_Set_mode_zas            12      //Установить режимы ЗАС
#define c_Reset_channel           13      //Сбросить канал в исходное состояние
#define c_Abort_transfer          14      //Прекратить передачу
#define c_Allow_longdata          15      //Разрешить обработку составных сообщений на приеме
//#define c_Request_mode_channel  20      //Запрос режима канала
#define c_Allow_report_set        20        //Разрешить выдачу в БЦВК донесений "Состояние канала" при обработке передаваемых и принимаемых данных


//КОД (8 бит) - код подтверждения приема команды, полученной от БЦВК: 0 = команда выполнена или принята к выполнению; 1 = ошибка формата; 2 = невозможно выполнить.
enum {com_OK,com_ERROR,com_UNABLE};

/*#define K1  1
#define K2  2
#define K3  3
#define K4  4
#define K5  5
#define K6  6
#define K7  7
#define K8  8
#define Z1  9
#define Z2  10
*/


/*typedef __packed    union {
             struct
             {

             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             uint8_t d[80];
            }form;
            uint32_t d[20];

         } Debug_print;
*/
typedef __packed    union {

                            uint32_t d[35];

                    struct {
                            uint8_t  Pnp;
                            uint32_t L;
                            uint8_t A;
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
                            uint32_t INS;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint8_t  NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
                            uint8_t  NPrg;  //ПРГ (8 бит) - номер программы Т-821-06 (0...255); в сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint8_t  RP;   //РП (8 бит) - режим передачи: 0 = "Перевал" - короткий код, 8 = "Перевал" - длинный код; остальные значения совпадают со значениями РК из команды "Установить режим канала".
                            //В пределах режима "Чайка" значение РП имеет приоритет и может отличаться от значения РК, ранее установленного командой "Установить режим канала".
                            uint8_t  NR;   //НП (8 бит) - непрерывный режим работы передатчика: 0 = отключать излучение по окончании передачи в радиоканал всех сообщений, полученных от БЦВК,
                            //1 = не отключать излучение.
                            uint8_t  DP;      //длина преамбулы
                            uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
                            uint8_t b[DATAMAX+12];
                            }form;
 } H_d_rx;
//#pragma data_alignment=4
#define        L_Header_data                    16
typedef __packed    union {

                            uint32_t d[100];

                    struct {
                            uint8_t  Pnp;
                            uint32_t L;
                            uint8_t A;
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
                            uint32_t INS;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint8_t  NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
                            uint8_t  NPrg;  //ПРГ (8 бит) - номер программы Т-821-06 (0...255); в сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
                            uint8_t  RP;   //РП (8 бит) - режим передачи: 0 = "Перевал" - короткий код, 8 = "Перевал" - длинный код; остальные значения совпадают со значениями РК из команды "Установить режим канала".
                            //В пределах режима "Чайка" значение РП имеет приоритет и может отличаться от значения РК, ранее установленного командой "Установить режим канала".
                            uint8_t  NR;   //НП (8 бит) - непрерывный режим работы передатчика: 0 = отключать излучение по окончании передачи в радиоканал всех сообщений, полученных от БЦВК,
                            //1 = не отключать излучение.
                            uint8_t  DP;      //длина преамбулы
                            uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
                            //uint8_t b[391];
                            }form;
 } Header_data;



#define     RTM_DATA_OFF_DATA        16
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
             uint32_t INS;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
             uint8_t  NZas;
             uint8_t  NPrg;  //ПРГ (8 бит) - номер программы Т-821-06 (0...255); в сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
             uint8_t  RP;   //РП (8 бит) - режим передачи: 0 = "Перевал" - короткий код, 8 = "Перевал" - длинный код; остальные значения совпадают со значениями РК из команды "Установить режим канала".
                            //В пределах режима "Чайка" значение РП имеет приоритет и может отличаться от значения РК, ранее установленного командой "Установить режим канала".
             uint8_t  NR;   //НП (8 бит) - непрерывный режим работы передатчика: 0 = отключать излучение по окончании передачи в радиоканал всех сообщений, полученных от БЦВК,
                            //1 = не отключать излучение.

             uint8_t  DP;      //длина преамбулы
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint8_t  Data[DATAMAX+400];
             } form;


             //uint32_t  D[(DATAMAX+RTM_DATA_OFF_DATA)];
             uint8_t  D[(DATAMAX+RTM_DATA_OFF_DATA)+400];

} RTM_data;

typedef         struct {
                        uint32_t IP;
                        uint16_t Port;
                        uint8_t Mac[6];
                }Adr_channel;






typedef __packed    union {
                #pragma data_alignment=4
                struct {
                        uint8_t Mode;  //РК (8 бит) - режим канала:
                        //0 = Перевал,
                        //1 = Чайка однократный,
                        //........
                        uint8_t V;   //СК (8 бит) - код скорости передачи и приема; значения 0...7 соответствуют скоростям 75, 150, 300, 1200, 2400, 4800, 9600, 16000.
                        uint8_t Shl;  //ШЛ (8 бит) - включение/состояние шлейфов; значения:
                                        //1 = включить;
                                        //0 = отключить. разряды байта: D0 = контроллер Ethernet; D1 = контроллер ЗАС (МПДИ-01); D2 = кодек соответствующего канала (МПДИ-02);

                        uint8_t NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
                        uint8_t Lp;     // ДП (8 бит) - длина преамбулы на передаче, в десятках мс.
                        uint8_t PPRCH; //ППРЧ (8 бит) - работа радиостанции в режиме ППРЧ: 0 = отключить, 1 = включить
                        uint8_t Interface;      //ТС (8
                        uint8_t ZAS;

                }form;
                uint32_t  data[2];
                uint8_t   bdata[8];
           // } db;
 } TK_data;





typedef __packed    struct {
                uint8_t  Pnp;
                uint8_t  data[RTMDMAX];
           // } db;
 } RTM;




#define     L_Confirm             7
#pragma data_alignment=4
 typedef  __packed struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t  A;
             uint8_t  Mode;      //КОД (8 бит) - код подтверждения приема команды

} RTM_confirm;





#pragma data_alignment=4
 typedef  __packed struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
             uint32_t INS;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
             uint8_t  NPrg;  //ПРГ (8 бит) - номер программы Т-821-06 (0...255); в сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
             uint8_t  RP;   //РП (8 бит) - режим передачи: 0 = "Перевал" - короткий код, 8 = "Перевал" - длинный код; остальные значения совпадают со значениями РК из команды "Установить режим канала".
                            //В пределах режима "Чайка" значение РП имеет приоритет и может отличаться от значения РК, ранее установленного командой "Установить режим канала".
             uint8_t  NR;   //НП (8 бит) - непрерывный режим работы передатчика: 0 = отключать излучение по окончании передачи в радиоканал всех сообщений, полученных от БЦВК,
                            //1 = не отключать излучение.

             uint8_t File[81]; //ИФ (2…81 байт) - имя файла, кодировка UTF-8, последний байт всегда равен 0.

             uint8_t Date[6];   //ДВ (6 байт) - дата и время создания файла: ДД ММ ГГ ЧЧ мм СС - значения занимают по одному байту.

             uint8_t Service[16];  // САЧ - служебно-адресная часть в формате УКВС-1, младший бит первого байта - младший бит номера формуляра.
                                  // Длина САЧ определяется длиной адреса и использованием ретрансляции (признаки входят в структуру САЧ) и может принимать значения 8, 10, 12, 16 байт.

             uint8_t  Data[RTMDMAX-122];  //???????????????????????????????????????????????????????????????????????????????????
} RTM_ldata;


//enum {cs3_OK,cs3_TimeOut,cs3_IvError,cs3_Iv};

//-----------------------------------------------------RTM_COM-------------------------------------------------------------------------------------------------------
#define       L_RTM                         25


#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             uint8_t D[L_RTM];
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             }form;
             //uint8_t D[L_RTM-6];
} RTM_glob;

//------------------------------------------------c_Result_transfer_data-------------------------------------------------------------------------------------------
#define     L_Result_transfer_data          19


#pragma data_alignment=4
 typedef  __packed struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
                            //ИНС (32 бита) - исходящий номер передаваемого сообщения (идентификатор); в эфир не передается, служит для контроля обработки сообщения.
             uint32_t INS;  //В сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
             uint8_t  NPrg;  //ПРГ (8 бит) - номер программы Т-821-06 (0...255); в сообщениях "Данные", передаваемых в направлении "Прима-БМ" - БЦВК: всегда 0.
             uint8_t  RP;   //РП (8 бит) - режим передачи: 0 = "Перевал" - короткий код, 8 = "Перевал" - длинный код; остальные значения совпадают со значениями РК из команды "Установить режим канала".
                            //В пределах режима "Чайка" значение РП имеет приоритет и может отличаться от значения РК, ранее установленного командой "Установить режим канала".
             uint8_t  NR;   //НП (8 бит) - непрерывный режим работы передатчика: 0 = отключать излучение по окончании передачи в радиоканал всех сообщений, полученных от БЦВК,
                            //1 = не отключать излучение.
             uint16_t  NSeg; //НС,
             uint16_t  SumSeg; //КС (по 16 бит каждый) - номер сегмента и количество сегментов в передаваемом сообщении;
                             //при передаче одиночного сообщения НС = КС = 1. Сегменты формируются комплексом "Прима-БМ". Донесение, в котором НС = КС, КСП = 0,
                             //означает полное завершение передачи данных в радиоканал.

             uint8_t   Code; //КСП (8 бит) - код состояния передачи:
            // 0 = передача выполнена;
            // 1 = таймаут ожидания сигнала "Излучение включено";
            // 2 = преждевременное отключение сигнала "Излучение включено";
            // 3 = передача выполнена, но нет отключения сигнала "Излучение включено" в ответ на отключение сигнала "Включить излучение";
           //  4 = передача прекращена по команде "Сбросить канал" или "Прекратить передачу";
           //  5 = ошибка формата сообщения данных;
           //  6 = неисправность Т-821-06 (аппарат неисправен или отсутствует требуемая программа);
            // 7 = не задан режим канала (исходное состояние)

} RTM_result;


//-------------------------------------------------------------------c_Set_mode_Ethernet-----------------------------------------------------------------------------
#define     L_Set_mode_Ethernet            25

#pragma data_alignment=4
 typedef  __packed union {
             #pragma data_alignment=4
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             uint32_t IP;
             uint16_t Port;
             uint32_t Mac1;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint16_t Mac2;
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint8_t NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
             uint8_t Kp;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint8_t Kpp;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
             uint16_t Rd;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
             uint8_t Kv;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
            }form;
            uint8_t D[L_Set_mode_Ethernet];
} RTM_setEthernet;

//-------------------------------------------------------------------c_Set_mode_channel---------------------------------------------------------------------------------
#define     L_Set_mode_channel            14

#pragma data_alignment=4
 typedef  __packed union {
             #pragma data_alignment=4
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t A;
             uint8_t NCh;    //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.
            // uint8_t Mode;  //РК (8 бит) - режим канала:
             //0 = Перевал,
             //1 = Чайка однократный,
             //2 = Чайка двукратный,
             //3 = Чайка "Аккорд",
             //4 = Чайка "Мелодия",
             //5 = без кодирования,
             //7 = режим не задан (исходное состояние; передается только в донесении, для сброса режима предназначена команда сброса канала).


             uint8_t V;   //СК (8 бит) - код скорости передачи и приема; значения 0...7 соответствуют скоростям 75, 150, 300, 1200, 2400, 4800, 9600, 16000.
             uint8_t Shl;  //ШЛ (8 бит) - включение/состояние шлейфов; значения:
             //1 = включить;
             //0 = отключить. разряды байта: D0 = контроллер Ethernet; D1 = контроллер ЗАС (МПДИ-01); D2 = кодек соответствующего канала (МПДИ-02);

             uint8_t NZas;  // НЗ (8 бит) - номер ЗАС: 0 = ЗАС1, 1 = ЗАС2
             uint8_t Lp;     // ДП (8 бит) - длина преамбулы на передаче, в десятках мс.
             uint8_t PPRCH; //ППРЧ (8 бит) - работа радиостанции в режиме ППРЧ: 0 = отключить, 1 = включить
             uint8_t Interface;      //ТС (8 бит) - тип стыка с радиостанцией: 0 = С1-ТГ, 1 = С1-ФЛ-БИ, 2 = Ethernet
             uint8_t Kvt;  // режим квитирования
            }form;
            uint8_t D[L_Set_mode_channel];
} RTM_setchannel;

//----------------------------------------------------------------c_Set_mode_time----------------------------------------------------------------------
#define           L_Set_mode_time        9

#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t  A;
             uint8_t  t;    // ЧЧ ММ СС (по 8 бит) - текущее время.
             uint8_t  m;
             uint8_t  c;

             }form;
             uint8_t D[L_Set_mode_time];
} RTM_settime;

//----------------------------------------------------------------c_Set_mode_zas-------------------------------------------------------------------
#define       L_Set_mode_zas          8

#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t  A;
             uint8_t  ZAS1;   //ЗАС1 ЗАС2 (по 1 байту) - режимы ЗАС1 и ЗАС2:
             uint8_t  ZAS2;
             //0 = "Перевал",
             //1 = "Чайка".
             } form;
             uint8_t D[L_Set_mode_zas];


} RTM_setzas;

//----------------------------------------------------------------c_Reset_channel---------------------------------------------------------------------------
#define       L_Reset_channel           7

#pragma data_alignment=4
 typedef  __packed struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t  A;
             uint8_t  NCh;   //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.

} RTM_reset;

//-----------------------------------------------------------------c_Abort_transfer------------------------------------------------------------------------
#define       L_Abort_transfer           7

#pragma data_alignment=4
 typedef  __packed struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t  A;
             uint8_t  NCh;   //НК (8 бит) - номер канала комплекса "Прима-БМ": 0…7.

} RTM_abort;

//-----------------------------------------------------------------c_Allow_longdata----------------------------------------------------------------------------
#define       L_Allow_longdata            7

#pragma data_alignment=4
 typedef  __packed struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t  A;
             uint8_t  OCP;   //ОСП (1 байт) - включает/отключает обработку составных сообщений на приеме в соответствии с заданными адресами абонентов.

} RTM_allowldata;


//------------------------------------------------------------------c_Allow_report_set-------------------------------------------------------------------------------
#define       L_Allow_report_set       7

#pragma data_alignment=4
 typedef  __packed struct {
             uint8_t  Pnp;
             uint32_t L;
             uint8_t  A;
             uint8_t  VDC;   //ВДС (1 байт) - включает/отключает выдачу в БЦВК донесений "Состояние канала" при обработке передаваемых и принимаемых данных
                            // 1 = включить;
                            //0 = отключить (задано по умолчанию).


} RTM_allowreport;
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


//************************************************************************************************************************************************************************
//                                                      zas_uzo


 //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ UZO +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*Режим канала:
СК - 3 бита (скорость)
ТС - 2 бита (тип стыка)
ШЛ - 2 бита (шлейф)
ППРЧ - 1 бит (режим ППРЧ)
НЗ - 1 бит (номер ЗАС)
*/

/*идет обмен ПРМ-0
идет обмен ПРД-1
ошибка обмена ПРМ-2
ошибка обмена ПРД-3
НЗ - 7
*/

typedef __packed union{

#pragma data_alignment=4
 __packed  struct {

__packed  uint8_t  V:3, Ts:2, Shl:2, PPrch:1;

__packed  uint8_t Dp; /*Длина преамбулы*/

__packed  uint8_t  Prm:1,Prd:1,Error_prm:1,Error_prd:1, Non:3, Nz:1;

__packed  uint8_t  Temp8;

} form;

uint32_t  D;

}Tk_uzo;

/*
ДС - Длина сообщения.
КАС - Количество адресов станций.
Канал - Адреса каналов станций, которые должны исполнить данную команду.
ИНС - Исходящий номер передаваемого сообщения.
РП - Режим передачи.
НП - Непрерывный режим работы передатчика.
НЗ- номер заса.
*/
// ID  ДС(1байт) КАС (1байт) Канал 1..32  ( IP(4) Port(2) Mak(6) )(384 байт) ИНС    (1байт)  РП  (1байт) НП (1байт)  НЗ (1байт)



#pragma data_alignment=4
typedef __packed            struct {
                                    uint8_t  length;
                                    uint8_t  N;
                                    uint8_t  Ins;
                                    uint8_t  Rp;
                                    uint8_t  Nr;
                                    uint8_t  Nz;
} Tk_uzo_ip;



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ZAS+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*ЗАС - Режим передачи (чайка или перевал).
ФС - Флаг и состояния:
ФС(0) - бит Пуск ЗАС из МПИ ( 0 - нет передачи в ЗАС или 1 - передача в ЗАС )
ФС(1) - бит неисправности ЗАС в МПИ (0- исправно или 1- неисправно)
ФС(2) - бит Прием Информации в МПИ  (0 - нет информации или 1 -информация принята)
__packed*/
/*
typedef __packed    union {
                           #pragma data_alignment=4
                            uint32_t D;
                    struct {
                            __packed  uint16_t L;
                            __packed  uint16_t Pusk:1,Nsp:1,Prm:1,Res:1;//,Non:12;

                            }form;
 } Tk_z;
*/
/*
typedef __packed    union {
#pragma data_alignment=4
                            struct {
                                    uint16_t length;
                                    uint16_t Ins;
                                    uint32_t data[28];
                            }form;
                            uint8_t Wdata[29];
 } Tk_zas_data;  */
//***************************************************************************************************************************************************************************
/*
#define len_OFS               3                   //  смещение до поля длины сообщения в сообщении от АРМ (поле 8 Bit)
#define comanda_OFS           4                   //  смещение до поля команды в сообщении от АРМ(поле 8 Bit)
#define adr_kuda_OFS          5                   //  смещение до поля адреса назначения в сообщении от АРМ (поле 16 Bit)  (ОТ)
#define adr_otkuda_OFS        7                   //  смещение до поля адреса отправителя в сообщении от АРМ (поле 16 Bit) (ДП)

// Адреса слов РТМ
#define ALDATA 64
#define AHDATA 120
#define ACS0   253
#define ACS1   252
#define ACS2   251
#define ACS3   250

*/
//-----------------------------------------------------------------------Init var---------------------------------------------------------------------------
#pragma data_alignment=4
 typedef  __packed union{
             #pragma data_alignment=4
             struct {
             uint32_t  A;
             uint16_t P;
             uint8_t  M[6];
             } form;
             uint8_t D[12];

} RTM_APM;
/*
RTM_APM     APM[32]= {0};
//--------------------------------------------------


uint8_t     td_bsy = 0;

uint8_t    *Rx_Frame;

uint8_t    *Rx_Frame_data;
//RTM        Tx_FrameData = {BeginPack,0};

#pragma data_alignment=4
RTM_confirm                     Tx_confirm ={BeginPack,L_Confirm,c_Confirm,com_OK};

#pragma data_alignment=4
RTM_data                        Rx_data ={BeginPack,c_Data,0};
#pragma data_alignment=4
RTM_data                        Tx_data ={BeginPack,c_Data,0};

#pragma data_alignment=4
RTM_ldata                       Rx_ldata = {0};// {};

#pragma data_alignment=4
//uint8_t Rx_d [L_RTM] = {0};

RTM_glob                  Rx_rtm = {BeginPack,0};





#pragma data_alignment=4
RTM_result                      Tx_result = {BeginPack,L_Result_transfer_data,c_Result_transfer_data,0};
//#pragma data_alignment=4
//RTM_status              Tx_status ={BeginPack,L_Status_channel,c_Status_channel,0};

#pragma data_alignment=4
RTM_setchannel                  Tx_setchannel = {BeginPack,L_Set_mode_channel,c_Set_mode_channel,0};

#pragma data_alignment=4
RTM_setchannel                  Rx_statuschannel ={BeginPack,L_Set_mode_channel,c_Set_mode_channel,0};
#pragma data_alignment=4
RTM_settime                     Tx_settime = {BeginPack,L_Set_mode_time,c_Set_mode_time,0};


#pragma data_alignment=4
RTM_setzas                      Tx_setzas = {BeginPack,L_Set_mode_zas,c_Set_mode_zas,0};


#pragma data_alignment=4
RTM_reset                       Tx_reset = {BeginPack,L_Reset_channel,c_Reset_channel,0};

#pragma data_alignment=4
RTM_abort                       Tx_abort = {BeginPack,L_Abort_transfer,c_Abort_transfer,0};

#pragma data_alignment=4
RTM_allowldata                  Tx_allowldata = {BeginPack,L_Allow_longdata,c_Allow_longdata,0};

#pragma data_alignment=4
RTM_allowreport                 Tx_allowreport = {BeginPack,L_Allow_report_set,c_Allow_report_set,0};
*/
//#pragma data_alignment=4
//TK_data                        Tk_r[10] = {0};
//#pragma data_alignment=4
//TK_data                        Tk_w[10] = {0};


//#pragma data_alignment=4
//Adr_channel Adr_PC[32] = {0};
#endif

